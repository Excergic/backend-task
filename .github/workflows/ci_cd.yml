# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install ruff
      
      - name: Run ruff check
        run: ruff check app/ --output-format=github
        continue-on-error: true
      
      - name: Run ruff format check
        run: ruff format --check app/
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stories_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx faker
      
      - name: Run database migrations
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d stories_db -f migrations/001_create_tables.sql || true
          PGPASSWORD=postgres psql -h localhost -U postgres -d stories_db -f migrations/002_create_indexes.sql || true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/stories_db
      
      - name: Run unit tests
        run: PYTHONPATH=. pytest tests/unit/ -v -m unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/stories_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret
          MINIO_ENDPOINT: http://localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Render Deploy
        run: |
          if [ -n "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" ]; then
            echo "✅ Triggering Render deployment..."
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
            echo "✅ Deploy triggered successfully"
          else
            echo "⚠️  RENDER_DEPLOY_HOOK_URL secret not configured"
            echo "Skipping automatic deployment to Render"
            echo ""
            echo "To enable auto-deploy:"
            echo "1. Go to Render Dashboard → Your Service → Settings"
            echo "2. Copy the Deploy Hook URL"
            echo "3. Add it as 'RENDER_DEPLOY_HOOK_URL' secret in GitHub repo settings"
          fi
